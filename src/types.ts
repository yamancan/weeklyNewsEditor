import { Conversation, ConversationFlavor } from '@grammyjs/conversations';
import { Context, SessionFlavor } from 'grammy';
import { InlineKeyboardButton, InlineKeyboardMarkup } from 'grammy/types';

/**
 * Represents the data associated with a message that has interactive components (keyboards).
 * This data is stored to maintain context across interactions (e.g., button clicks).
 */
export interface MessageData {
    /** A unique identifier for this specific message data instance (often a UUID). */
    messageId: string;
    /** The original raw text content of the news or message being processed. */
    originalMessageText: string;
    /** Optional content generated by GPT for this message. */
    gptGeneratedContent?: string;
    /** The inline keyboard buttons associated with this message (stored as the raw structure). */
    keyboard?: InlineKeyboardButton[][];
    /** A specific set of buttons, typically for cancelling an ongoing operation (stored as raw structure). */
    cancelButton?: InlineKeyboardButton[];
    /** Optional full content of a message if it was scraped from a web source. */
    scrapedMessageContent?: string;
}

/**
 * Defines the structure of data encoded within callback queries from inline keyboard buttons.
 */
export interface CallbackQueryData {
    /** The type of action this callback represents. */
    query: 'sendGpt' | 'sendChannel' | 'newPrompt' | 'cancelNewPrompt' | 'gpt4o' | 'gpt3.5turbo' | 'cancelGptChange';
    /** The unique identifier of the `MessageData` instance to which this callback pertains. */
    messageStoreId: string;
}

/**
 * Represents the in-memory store for `MessageData` objects.
 * The keys are unique identifiers (UUIDs) corresponding to `MessageData.messageId`.
 */
export interface MessageStore {
    [key: string]: MessageData;
}

/**
 * Defines the structure for session data used by the bot, particularly for conversations.
 */
export interface SessionData {
    /** The currently selected OpenAI GPT model (e.g., 'gpt-4o', 'gpt-3.5-turbo'). */
    currentGptModel: string;
    /** 
     * Stores the `messageStoreId` when a 'new prompt' conversation is initiated.
     * This links the conversation back to the original message context.
     */
    messageStoreIdForNewPrompt?: string; 
}

/**
 * Custom context type for the GrammY bot.
 * It extends the base `Context` with flavors for session management (`SessionFlavor`)
 * and conversation handling (`ConversationFlavor`).
 */
export type MyContext = Context &
    SessionFlavor<SessionData> &
    ConversationFlavor;

/**
 * Defines the type for conversation functions used with the `@grammyjs/conversations` plugin.
 * Ensures that conversation functions receive the custom `MyContext`.
 */
export type MyConversation = Conversation<MyContext>;

/**
 * Represents a news article scraped from a web source.
 */
export interface NewsArticle {
    /** The title of the news article. */
    title: string;
    /** The direct URL to the news article. */
    link: string;
    /** A summary or the main textual content extracted from the article. */
    summary: string;
    /** A pre-formatted string combining title, summary, and link, often used for storing or displaying the full news item. */
    fullFormattedMessage: string;
    /** A pre-formatted string containing only the link, typically for initial short messages sent by the scraper. */
    linkOnlyMessage: string;
} 